[{"objectID":"Home","href":"api/ansys/tools/versioning/exceptions/index.html#the-exceptionspy-module","title":"The exceptions.py module","text":"The exceptions.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/versioning/exceptions/index.html#summary","title":"The exceptions.py module > Summary","text":"Summary\n\nExceptions\n\n\n\n\n\nVersionSyntaxError\n\nAn exception to be raised when an invalid version syntax is found.\n\nVersionError\n\nAn exception to be raised when a version is not valid.\n\n"},{"objectID":"Home","href":"api/ansys/tools/versioning/exceptions/index.html#description","title":"The exceptions.py module > Description","text":"Description\n\nA module containing custom exceptions."},{"objectID":"Home","href":"api/ansys/tools/versioning/exceptions/VersionError.html#versionerror","title":"VersionError","text":"VersionError\n\n\n\nexception ansys.tools.versioning.exceptions.VersionError(msg)\n\nBases: Exception\n\nAn exception to be raised when a version is not valid."},{"objectID":"Home","href":"api/ansys/tools/versioning/exceptions/VersionError.html#import-detail","title":"VersionError > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/versioning/index.html#the-ansystoolsversioning-library","title":"The ansys.tools.versioning library","text":"The ansys.tools.versioning library\n\n"},{"objectID":"Home","href":"api/ansys/tools/versioning/index.html#summary","title":"The ansys.tools.versioning library > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\nexceptions\n\nA module containing custom exceptions.\n\nutils\n\nA module containing various utilities.\n\nFunctions\n\n\n\n\n\nrequires_version\n\nEnsure the method called matches a certain version.\n\nserver_meets_version\n\nCheck if server meets the required version.\n\n"},{"objectID":"Home","href":"api/ansys/tools/versioning/index.html#description","title":"The ansys.tools.versioning library > Description","text":"Description\n\nPyAnsys Tools Versioning.\n\nUtilities for backwards and forwards server support."},{"objectID":"Home","href":"api/ansys/tools/versioning/index.html#module-detail","title":"The ansys.tools.versioning library > Module detail","text":"Module detail"},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section describes pyansys-tools-versioning endpoints, their capabilities, and how\nto interact with them programmatically.\n\n"},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/mystr.html#mystr","title":"mystr","text":"mystr\n\n\n\nclass ansys.tools.versioning.utils.mystr\n\nBases: VersionMeta, str\n\nCustom class to hold strings for versioning."},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/mystr.html#import-detail","title":"mystr > Import detail","text":"Import detail"},{"objectID":"Home","href":"index.html#pyansys-tools-versioning","title":"PyAnsys Tools Versioning","text":"PyAnsys Tools Versioning\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUtilities for backwards and forwards server support."},{"objectID":"Home","href":"index.html#how-to-install","title":"PyAnsys Tools Versioning > How to install","text":"How to install\n\nAt least two installation modes are provided: user and developer."},{"objectID":"Home","href":"index.html#for-users","title":"PyAnsys Tools Versioning > For users","text":"For users\n\nIn order to install PyAnsys Tools Versioning, make sure you\nhave the latest version of pip. To do so, run:\n\nThen, you can simply execute:"},{"objectID":"Home","href":"index.html#for-developers","title":"PyAnsys Tools Versioning > For developers","text":"For developers\n\nInstalling PyAnsys Tools Versioning in developer mode allows\nyou to modify the source and enhance it.\n\nBefore contributing to the project, please refer to the PyAnsys Developer’s guide. You will\nneed to follow these steps:\n\nStart by cloning this repository:\n\n\n\nCreate a fresh-clean Python environment and activate it:\n\n\n\nMake sure you have the latest required build system and doc, testing, and CI tools:\n\n\n\nInstall the project in editable mode:\n\nFinally, verify your development installation by running:"},{"objectID":"Home","href":"index.html#how-to-testing","title":"PyAnsys Tools Versioning > How to testing","text":"How to testing\n\nThis project takes advantage of tox. This tool allows to automate common\ndevelopment tasks (similar to Makefile) but it is oriented towards Python\ndevelopment."},{"objectID":"Home","href":"index.html#using-tox","title":"PyAnsys Tools Versioning > Using tox","text":"Using tox\n\nAs Makefile has rules, tox has environments. In fact, the tool creates its\nown virtual environment so anything being tested is isolated from the project in\norder to guarantee project’s integrity. The following environments commands are provided:\n\ntox -e style: will check for coding style quality.\n\ntox -e py: checks for unit tests.\n\ntox -e py-coverage: checks for unit testing and code coverage.\n\ntox -e doc: checks for documentation building process."},{"objectID":"Home","href":"index.html#raw-testing","title":"PyAnsys Tools Versioning > Raw testing","text":"Raw testing\n\nIf required, you can always call the style commands (black, isort,\nflake8…) or unit testing ones (pytest) from the command line. However,\nthis does not guarantee that your project is being tested in an isolated\nenvironment, which is the reason why tools like tox exist."},{"objectID":"Home","href":"index.html#a-note-on-pre-commit","title":"PyAnsys Tools Versioning > A note on pre-commit","text":"A note on pre-commit\n\nThe style checks take advantage of pre-commit. Developers are not forced but\nencouraged to install this tool via:"},{"objectID":"Home","href":"index.html#documentation","title":"PyAnsys Tools Versioning > Documentation","text":"Documentation\n\nFor building documentation, you can either run the usual rules provided in the\nSphinx Makefile, such us:\n\nHowever, the recommended way of checking documentation integrity is using:"},{"objectID":"Home","href":"index.html#distributing","title":"PyAnsys Tools Versioning > Distributing","text":"Distributing\n\nIf you would like to create either source or wheel files, start by installing\nthe building requirements and then executing the build module:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/SemanticVersion.html#semanticversion","title":"SemanticVersion","text":"SemanticVersion\n\n\n\nclass ansys.tools.versioning.utils.SemanticVersion\n\nBases: tuple\n\nClass for semantic versioning.\n\nIt is a subclass of tuple and can be instantiated from a string or a tuple.\n\nYou can use ‘dev’ in the patch version, but nowhere else."},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/SemanticVersion.html#overview","title":"SemanticVersion > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nas_string\n\nReturn the version as string.\n\nas_tuple\n\nReturn the version as tuple.\n\nas_list\n\nReturn the version as list.\n\nas_dict\n\nReturn the version as dict.\n\nProperties\n\n\n\n\n\nmajor\n\nReturn major version number.\n\nminor\n\nReturn minor version number.\n\npatch\n\nReturn patch version number."},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/SemanticVersion.html#import-detail","title":"SemanticVersion > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/SemanticVersion.html#property-detail","title":"SemanticVersion > Property detail","text":"Property detail\n\n\n\nproperty SemanticVersion.major\n\nReturn major version number.\n\n\n\nproperty SemanticVersion.minor\n\nReturn minor version number.\n\n\n\nproperty SemanticVersion.patch\n\nReturn patch version number."},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/SemanticVersion.html#method-detail","title":"SemanticVersion > Method detail","text":"Method detail\n\n\n\nSemanticVersion.as_string()\n\nReturn the version as string.\n\n\n\nSemanticVersion.as_tuple()\n\nReturn the version as tuple.\n\n\n\nSemanticVersion.as_list()\n\nReturn the version as list.\n\n\n\nSemanticVersion.as_dict()\n\nReturn the version as dict."},{"objectID":"Getting started","href":"getting_started.html#getting-started","title":"Getting started","text":"Getting started"},{"objectID":"Getting started","href":"getting_started.html#installation","title":"Getting started > Installation","text":"Installation\n\nThis package may be installed following two procedures: either the pip package\nmanager installation or the manual installation. The process to be followed for\neach of them is shown in the upcoming sections.\n\nThe pyansys-tools-versioning package currently supports Python >=3.10 on\nWindows, macOS, and Linux.\n\nInstall the latest release from PyPi with:\n\nAlternatively, install the latest from GitHub via:\n\nFor a local development version, install with (requires pip >= 22.0):"},{"objectID":"Getting started","href":"getting_started.html#offline-installation","title":"Getting started > Offline installation","text":"Offline installation\n\nIf you lack an internet connection in your local machine, the recommended way of\ninstalling pyansys-tools-versioning is downloading the wheelhouse archive\nfrom the Releases Page for your corresponding machine architecture.\n\nEach wheelhouse archive contains all the python wheels necessary to install\nPyAnsys Tools Report from scratch on Windows and Linux for Python >=3.10. You can\ninstall this on an isolated system with a fresh python or on a virtual\nenvironment.\n\nFor example, on Linux with Python 3.10, unzip it and install it with the\nfollowing:\n\nIf you are on Windows with Python 3.10, unzip to a wheelhouse directory and\ninstall using the same command as before.\n\nConsider installing using a virtual environment. More information on general\nPyAnsys development can be found in the PyAnsys Developer’s Guide."},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/VersionNumber.html#versionnumber","title":"VersionNumber","text":"VersionNumber\n\n\n\nclass ansys.tools.versioning.utils.VersionNumber\n\nClass for version comparison.\n\nThis class can be instantiated from a string or an integer.\nThe constructor will choose the corresponding class.\n\nAny combination of ‘dev’ and integers will be considered as a string.\n‘dev’ is considered as the highest version number possible.\n\nExamples\n\n>>> from ansys.tools.versioning.utils import VersionNumber\n>>> VersionNumber(1)\n1\n>>> VersionNumber(\"dev\")\n'dev'\n>>> VersionNumber(1) <= VersionNumber(\"dev\")\nTrue\n>>> VersionNumber(99999) >= VersionNumber(\"dev\")\nFalse\n>>> VersionNumber(\"dev\") == VersionNumber(\"dev1\")\nFalse\n>>> VersionNumber(\"dev\") != VersionNumber(\"dev1\")\nTrue"},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/VersionNumber.html#import-detail","title":"VersionNumber > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/index.html#the-utilspy-module","title":"The utils.py module","text":"The utils.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/index.html#summary","title":"The utils.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nVersionMeta\n\nMetaclass for version comparison.\n\nSemanticVersion\n\nClass for semantic versioning.\n\nmystr\n\nCustom class to hold strings for versioning.\n\nmyint\n\nCustom class to hold integers for versioning.\n\nVersionNumber\n\nClass for version comparison.\n\nFunctions\n\n\n\n\n\nsanitize_version_string\n\nSanitize a version string number by adding additional zeros.\n\nsanitize_version_tuple\n\nSanitize a version number by adding additional zeros.\n\nversion_string_as_tuple\n\nConvert a semantic version string into a tuple.\n\nversion_tuple_as_string\n\nConvert a semantic version tuple into a string.\n\nserver_meets_version\n\nCheck if server meets the required version.\n\nrequires_version\n\nEnsure the method called matches a certain version.\n\nvalid_version_string\n\nCheck if version string is valid.\n\nvalid_semantic_version\n\nCheck if a semantic version is valid.\n\n"},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/index.html#description","title":"The utils.py module > Description","text":"Description\n\nA module containing various utilities."},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/index.html#module-detail","title":"The utils.py module > Module detail","text":"Module detail\n\n\n\nutils.sanitize_version_string(version_string)\n\nSanitize a version string number by adding additional zeros.\n\nParameters\n\nversion_string\n\npython:str\n\nA string representing a semantic version.\n\nReturns\n\npython:str\n\nA string representing a semantic version.\n\nExamples\n\n>>> sanitize_version_string(\"0\")\n'0.0.0'\n>>> sanitize_version_string(\"1.2\")\n'1.2.0'\n>>> sanitize_version_string(\"0.3.4\")\n'0.3.4'\n\n\n\nutils.sanitize_version_tuple(version_tuple)\n\nSanitize a version number by adding additional zeros.\n\nParameters\n\nversion_tuple\n\npython:tuple\n\nA tuple representing a semantic version.\n\nReturns\n\npython:tuple\n\nA tuple representing a semantic version.\n\nExamples\n\n>>> sanitize_version_tuple((0,))\n(0, 0, 0)\n>>> sanitize_version_tuple((1, 2))\n(1, 2, 0)\n>>> sanitize_version_tuple((0, 3, 4))\n(0, 3, 4)\n\n\n\nutils.version_string_as_tuple(version_string)\n\nConvert a semantic version string into a tuple.\n\nParameters\n\nversion_string\n\npython:str\n\nA string representing a semantic version.\n\nReturns\n\nversion_tuple\n\npython:tuple\n\nA tuple representing a semantic version.\n\nExamples\n\n>>> version_string_as_tuple(\"0.3.4\")\n(0, 3, 4)\n>>> version_string_as_tuple(\"1.2\")\n(1, 2, 0)\n\n\n\nutils.version_tuple_as_string(version_tuple)\n\nConvert a semantic version tuple into a string.\n\nParameters\n\nversion_tuple\n\npython:tuple\n\nA tuple representing a semantic version.\n\nReturns\n\npython:str\n\nA string representing a semantic version.\n\nExamples\n\n>>> version_tuple_as_string((0, 3, 4))\n'0.3.4'\n>>> version_tuple_as_string((1, 2))\n'1.2.0'\n\n\n\nutils.server_meets_version(server_version, required_version)\n\nCheck if server meets the required version.\n\nParameters\n\nserver_version\n\npython:str, python:tuple, obj\n\nA string or tuple representing the server version.\nIf it is an object different from the previous ones, it must have a ‘_server_version’ attribute.\n\nrequired_version\n\npython:str, python:tuple\n\nA string or tuple representing the version to be meet.\n\nReturns\n\nbool\n\nTrue if server version meets required version, False if not.\n\nRaises\n\nValueError\n\nIf the ‘server_version’ object does not have ‘_server_version’ attribute.\n\nExamples\n\n>>> server_version, required_version = \"1.2.0\", \"1.3.0\"\n>>> server_meets_version(server_version, required_version)\nFalse\n>>> server_version, required_version = (1, 2, 0), (1, 3, 0)\n>>> server_meets_version(server_version, required_version)\nFalse\n>>> server_version, required_version = \"2.3.0\", \"1.3.0\"\n>>> server_meets_version(server_version, required_version)\nTrue\n>>> server_version, required_version = (2, 3, 0), (1, 3, 0)\n>>> server_meets_version(server_version, required_version)\nTrue\n>>> server_version, required_version = (0, 0, 0), (0, 0, 0)\n>>> server_meets_version(server_version, required_version)\nTrue\n>>> class MyServer:\n        def __init__(self):\n            self._server_version = \"1.2.0\"\n>>> server = MyServer()\n>>> server_version, required_version = server, \"1.3.0\"\n>>> server_meets_version(server, required_version)\n\n\n\nutils.requires_version(version, VERSION_MAP=None)\n\nEnsure the method called matches a certain version.\n\nParameters\n\nversion\n\npython:str, python:tuple\n\nA string or tuple representing the minimum required version.\n\nVERSION_MAP\n\npython:dict, optional\n\nA dictionary relating server version and ANSYS unified install version.\n\nRaises\n\nAttributeError\n\nDecorated class method requires _server_version attribute.\n\nVersionError\n\nDecorated class method is not supported by server version.\n\n\n\nutils.valid_version_string(version)\n\nCheck if version string is valid.\n\n\n\nutils.valid_semantic_version(iterable)\n\nCheck if a semantic version is valid."},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/myint.html#myint","title":"myint","text":"myint\n\n\n\nclass ansys.tools.versioning.utils.myint\n\nBases: VersionMeta, int\n\nCustom class to hold integers for versioning."},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/myint.html#import-detail","title":"myint > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/VersionMeta.html#versionmeta","title":"VersionMeta","text":"VersionMeta\n\n\n\nclass ansys.tools.versioning.utils.VersionMeta\n\nMetaclass for version comparison.\n\nImplements modification to magic methods."},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/VersionMeta.html#overview","title":"VersionMeta > Overview","text":"Overview\n\nSpecial methods\n\n\n\n\n\n__le__\n\nLess equal.\n\n__lt__\n\nLess than.\n\n__ge__\n\nGreater equal.\n\n__gt__\n\nGreater than.\n\n__eq__\n\nEqual method.\n\n__ne__\n\nNot equal.\n\n__hash__\n\nCall the underlying __hash__ method."},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/VersionMeta.html#import-detail","title":"VersionMeta > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/versioning/utils/VersionMeta.html#method-detail","title":"VersionMeta > Method detail","text":"Method detail\n\n\n\nVersionMeta.__le__(__x: str | int) -> bool\n\nLess equal.\n\nIf compared against a string which contains ‘dev’ it will always evaluate to True.\nIf compared against an int, it will perform a classic ‘less equal’ operation.\n\n\n\nVersionMeta.__lt__(__x: str | int) -> bool\n\nLess than.\n\nIf compared against a string which contains ‘dev’ it will always evaluate to True.\nIf compared against an int, it will perform a classic ‘less than’ operation.\n\n\n\nVersionMeta.__ge__(__x: str | int) -> bool\n\nGreater equal.\n\nIf compared against a string which contains ‘dev’ it will always evaluate to False.\nIf compared against an int, it will perform a classic ‘greater equal’ operation.\n\n\n\nVersionMeta.__gt__(__x: str | int) -> bool\n\nGreater than.\n\nIf compared against a string which contains ‘dev’ it will always evaluate to False.\nIf compared against an int, it will perform a classic ‘greater than’ operation.\n\n\n\nVersionMeta.__eq__(__x: object) -> bool\n\nEqual method.\n\nIf compared against a string which contains ‘dev’ it will always evaluate to False.\nIf compared against an int, it will perform a classic ‘equal’ operation.\n\n\n\nVersionMeta.__ne__(__x: object) -> bool\n\nNot equal.\n\nIf compared against a string which contains ‘dev’ it will always evaluate to not\n‘equal’ operation (True). If compared against an int, it will perform a classic ‘not equal’ operation.\n\n\n\nVersionMeta.__hash__() -> int\n\nCall the underlying __hash__ method."},{"objectID":"Home","href":"api/ansys/tools/versioning/exceptions/VersionSyntaxError.html#versionsyntaxerror","title":"VersionSyntaxError","text":"VersionSyntaxError\n\n\n\nexception ansys.tools.versioning.exceptions.VersionSyntaxError(msg)\n\nBases: Exception\n\nAn exception to be raised when an invalid version syntax is found."},{"objectID":"Home","href":"api/ansys/tools/versioning/exceptions/VersionSyntaxError.html#import-detail","title":"VersionSyntaxError > Import detail","text":"Import detail"},{"objectID":"User guide","href":"user_guide.html#user-guide","title":"User guide","text":"User guide\n\nThe fundamental object provided by ansys.tools.versioning is a decorator\nnamed ansys.tools.versioning.utils.requires_version() which accepts:\n\nThe required version as a string \"<Major>.<Minor>.<Patch>\" or tuple\n(<Major>, <Minor>, <Patch>).\n\nA version map in the form of dictionary relating the required version and its\nAnsys unified install, VERSION_MAP = {(<Major>, <Minor>, <Patch>): \"2022R1\"}"},{"objectID":"User guide","href":"user_guide.html#how-to-use","title":"User guide > How to use","text":"How to use\n\nThe requires_version decorator is expected to be used in all the desired\nmethods of a class containing a _server_version attribute. If the class in\nwhich it is used does not contain this attribute, an AttributeError is\nraised.\n\nAs an example, consider the following code declaring a generic Server class\nand a VERSION_MAP dictionary\n\nSuppose that two servers are created using previous class. Each of the servers\nis using a different version, meaning that some of the methods are available\nwhile some others are not:\n\nExecuting each one of the methods it is possible to see that both instances can\nexecute the old_method function:\n\nHowever, when trying to run new_method, the old server raises a\nVersionError exception, indicating that a higher server version is required:"}]