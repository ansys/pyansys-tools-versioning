:py:mod:`ansys.tools.versioning.utils`
======================================

.. py:module:: ansys.tools.versioning.utils

.. autoapi-nested-parse::

   A module containing various utilities.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ansys.tools.versioning.utils.VersionMeta
   ansys.tools.versioning.utils.SemanticVersion
   ansys.tools.versioning.utils.mystr
   ansys.tools.versioning.utils.myint
   ansys.tools.versioning.utils.VersionNumber



Functions
~~~~~~~~~

.. autoapisummary::

   ansys.tools.versioning.utils.sanitize_version_string
   ansys.tools.versioning.utils.sanitize_version_tuple
   ansys.tools.versioning.utils.version_string_as_tuple
   ansys.tools.versioning.utils.version_tuple_as_string
   ansys.tools.versioning.utils.server_meets_version
   ansys.tools.versioning.utils.requires_version
   ansys.tools.versioning.utils.valid_version_string
   ansys.tools.versioning.utils.valid_semantic_version



.. py:function:: sanitize_version_string(version_string)

   
   Sanitize a version string number by adding additional zeros.


   :Parameters:

       **version_string** : :class:`python:str`
           A string representing a semantic version.

   :Returns:

       :class:`python:str`
           A string representing a semantic version.










   .. rubric:: Examples

   >>> sanitize_version_string("0")
   '0.0.0'
   >>> sanitize_version_string("1.2")
   '1.2.0'
   >>> sanitize_version_string("0.3.4")
   '0.3.4'



   ..
       !! processed by numpydoc !!

.. py:function:: sanitize_version_tuple(version_tuple)

   
   Sanitize a version number by adding additional zeros.


   :Parameters:

       **version_tuple** : :class:`python:tuple`
           A tuple representing a semantic version.

   :Returns:

       :class:`python:tuple`
           A tuple representing a semantic version.










   .. rubric:: Examples

   >>> sanitize_version_tuple((0,))
   (0, 0, 0)
   >>> sanitize_version_tuple((1, 2))
   (1, 2, 0)
   >>> sanitize_version_tuple((0, 3, 4))
   (0, 3, 4)



   ..
       !! processed by numpydoc !!

.. py:function:: version_string_as_tuple(version_string)

   
   Convert a semantic version string into a tuple.


   :Parameters:

       **version_string** : :class:`python:str`
           A string representing a semantic version.

   :Returns:

       **version_tuple** : :class:`python:tuple`
           A tuple representing a semantic version.










   .. rubric:: Examples

   >>> version_string_as_tuple("0.3.4")
   (0, 3, 4)
   >>> version_string_as_tuple("1.2")
   (1, 2, 0)



   ..
       !! processed by numpydoc !!

.. py:function:: version_tuple_as_string(version_tuple)

   
   Convert a semantic version tuple into a string.


   :Parameters:

       **version_tuple** : :class:`python:tuple`
           A tuple representing a semantic version.

   :Returns:

       :class:`python:str`
           A string representing a semantic version.










   .. rubric:: Examples

   >>> version_tuple_as_string((0, 3, 4))
   '0.3.4'
   >>> version_tuple_as_string((1, 2))
   '1.2.0'



   ..
       !! processed by numpydoc !!

.. py:function:: server_meets_version(server_version, required_version)

   
   Check if server meets the required version.


   :Parameters:

       **server_version** : :class:`python:str`, :class:`python:tuple`, :obj:`obj`
           A string or tuple representing the server version.
           If it is an object different from the previous ones, it must have a '_server_version' attribute.

       **required_version** : :class:`python:str`, :class:`python:tuple`
           A string or tuple representing the version to be meet.

   :Returns:

       :ref:`bool <python:bltin-boolean-values>`
           ``True`` if server version meets required version, ``False`` if not.




   :Raises:

       :obj:`ValueError`
           If the 'server_version' object does not have '_server_version' attribute.






   .. rubric:: Examples

   >>> server_version, required_version = "1.2.0", "1.3.0"
   >>> server_meets_version(server_version, required_version)
   False
   >>> server_version, required_version = (1, 2, 0), (1, 3, 0)
   >>> server_meets_version(server_version, required_version)
   False
   >>> server_version, required_version = "2.3.0", "1.3.0"
   >>> server_meets_version(server_version, required_version)
   True
   >>> server_version, required_version = (2, 3, 0), (1, 3, 0)
   >>> server_meets_version(server_version, required_version)
   True
   >>> server_version, required_version = (0, 0, 0), (0, 0, 0)
   >>> server_meets_version(server_version, required_version)
   True
   >>> class MyServer:
           def __init__(self):
               self._server_version = "1.2.0"
   >>> server = MyServer()
   >>> server_version, required_version = server, "1.3.0"
   >>> server_meets_version(server, required_version)



   ..
       !! processed by numpydoc !!

.. py:function:: requires_version(version, VERSION_MAP=None)

   
   Ensure the method called matches a certain version.


   :Parameters:

       **version** : :class:`python:str`, :class:`python:tuple`
           A string or tuple representing the minimum required version.

       **VERSION_MAP** : :class:`python:dict`, :obj:`optional`
           A dictionary relating server version and ANSYS unified install version.





   :Raises:

       :obj:`AttributeError`
           Decorated class method requires ``_server_version`` attribute.

       :obj:`VersionError`
           Decorated class method is not supported by server version.









   ..
       !! processed by numpydoc !!

.. py:class:: VersionMeta

   
   Metaclass for version comparison.

   Implements modification to magic methods.















   ..
       !! processed by numpydoc !!
   .. py:method:: __le__(__x: Union[str, int]) -> bool

      
      Less equal.

      If compared against a string which contains 'dev' it will always evaluate to True.
      If compared against an int, it will perform a classic 'less equal' operation.















      ..
          !! processed by numpydoc !!

   .. py:method:: __lt__(__x: Union[str, int]) -> bool

      
      Less than.

      If compared against a string which contains 'dev' it will always evaluate to True.
      If compared against an int, it will perform a classic 'less than' operation.















      ..
          !! processed by numpydoc !!

   .. py:method:: __ge__(__x: Union[str, int]) -> bool

      
      Greater equal.

      If compared against a string which contains 'dev' it will always evaluate to False.
      If compared against an int, it will perform a classic 'greater equal' operation.















      ..
          !! processed by numpydoc !!

   .. py:method:: __gt__(__x: Union[str, int]) -> bool

      
      Greater than.

      If compared against a string which contains 'dev' it will always evaluate to False.
      If compared against an int, it will perform a classic 'greater than' operation.















      ..
          !! processed by numpydoc !!

   .. py:method:: __eq__(__x: object) -> bool

      
      Equal method.

      If compared against a string which contains 'dev' it will always evaluate to False.
      If compared against an int, it will perform a classic 'equal' operation.















      ..
          !! processed by numpydoc !!

   .. py:method:: __ne__(__x: object) -> bool

      
      Not equal.

      If compared against a string which contains 'dev' it will always evaluate to not
      'equal' operation (True). If compared against an int, it will perform a classic 'not equal' operation.















      ..
          !! processed by numpydoc !!

   .. py:method:: __hash__() -> int

      
      Call the underlying __hash__ method.
















      ..
          !! processed by numpydoc !!


.. py:class:: SemanticVersion

   Bases: :py:obj:`tuple`

   
   Class for semantic versioning.

   It is a subclass of tuple and can be instantiated from a string or a tuple.

   You can use 'dev' in the patch version, but nowhere else.















   ..
       !! processed by numpydoc !!
   .. py:property:: major

      
      Return major version number.
















      ..
          !! processed by numpydoc !!

   .. py:property:: minor

      
      Return minor version number.
















      ..
          !! processed by numpydoc !!

   .. py:property:: patch

      
      Return patch version number.
















      ..
          !! processed by numpydoc !!

   .. py:method:: as_string()

      
      Return the version as string.
















      ..
          !! processed by numpydoc !!

   .. py:method:: as_tuple()

      
      Return the version as tuple.
















      ..
          !! processed by numpydoc !!

   .. py:method:: as_list()

      
      Return the version as list.
















      ..
          !! processed by numpydoc !!

   .. py:method:: as_dict()

      
      Return the version as dict.
















      ..
          !! processed by numpydoc !!


.. py:class:: mystr

   Bases: :py:obj:`VersionMeta`, :py:obj:`str`

   
   Custom class to hold strings for versioning.
















   ..
       !! processed by numpydoc !!

.. py:class:: myint

   Bases: :py:obj:`VersionMeta`, :py:obj:`int`

   
   Custom class to hold integers for versioning.
















   ..
       !! processed by numpydoc !!

.. py:class:: VersionNumber

   
   Class for version comparison.

   This class can be instantiated from a string or an integer.
   The constructor will choose the corresponding class.

   Any combination of 'dev' and integers will be considered as a string.
   'dev' is considered as the highest version number possible.












   .. rubric:: Examples

   >>> from ansys.tools.versioning.utils import VersionNumber
   >>> VersionNumber(1)
   1
   >>> VersionNumber("dev")
   'dev'
   >>> VersionNumber(1) <= VersionNumber("dev")
   True
   >>> VersionNumber(99999) >= VersionNumber("dev")
   False
   >>> VersionNumber("dev") == VersionNumber("dev1")
   False
   >>> VersionNumber("dev") != VersionNumber("dev1")
   True



   ..
       !! processed by numpydoc !!

.. py:function:: valid_version_string(version)

   
   Check if version string is valid.
















   ..
       !! processed by numpydoc !!

.. py:function:: valid_semantic_version(iterable)

   
   Check if a semantic version is valid.
















   ..
       !! processed by numpydoc !!

